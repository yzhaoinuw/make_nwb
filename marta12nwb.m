addpath('/gpfs/fs3/archive/dkell12_lab/BrainFlowZZZ/make_nwb/matnwb')

figName = 'fig_4_pf_IP3R2';
fig1Path = ['/gpfs/fs3/archive/dkell12_lab/BrainFlowZZZ/Marta1/' figName];
writePath = ['/gpfs/fs3/archive/dkell12_lab/BrainFlowZZZ/marta_nwb/' figName];

fig1Dir = dir(fig1Path);
sessionFolders = fig1Dir([fig1Dir.isdir] & ~ismember({fig1Dir.name}, {'.', '..'}));
metadataFile = fullfile('/gpfs/fs3/archive/dkell12_lab/BrainFlowZZZ/marta_nwb', [figName '.xlsx']);
metadata = readtable(metadataFile);
metadata.Properties.RowNames = string(metadata{:,1});
metadata.Starting_time = datetime(metadata.Starting_time, 'ConvertFrom', 'excel');
metadata.Starting_time.Year = 2024;
metadata.Starting_time.Month = 9;
metadata.Starting_time.Day = 1;

metadata(:, 1) = [];

for i=1:numel(sessionFolders)
sessionID = sessionFolders(i).name;
tifFile = fullfile(fig1Path, sessionID, [sessionID, '.tif']);
 
%sessionID = '20240409_1_bPAC_KX_LED1s';
%tifFile = '/gpfs/fs3/archive/dkell12_lab/BrainFlowZZZ/Marta1/fig_1_pf_kx/20240409_1_bPAC_KX_LED1s/20240409_1_bPAC_KX_LED1s.tif';

nwbFilePath = fullfile(writePath, [sessionID '.nwb']);
if exist(nwbFilePath, 'file')
    continue
end

disp(['processing ' sessionID '.'])

tifInfo = imfinfo(tifFile);
nFrames = numel(tifInfo);
width = tifInfo(1).Width;
height = tifInfo(1).Height;

%%
startTime = metadata(sessionID, :).Starting_time;
deviceDescription = metadata{sessionID, 'Device'}{:};
emissionLambda = metadata{sessionID, 'Emission_lambda'};
excitationLambda = metadata{sessionID, 'Excitation_lambda'};
imagingRate = metadata{sessionID, 'Imaging_rate'};
location = metadata{sessionID, 'Location'}{:};
indicator = metadata{sessionID, 'Indicator'}{:};
startingTimeRate = metadata{sessionID, 'Starting_time_rate'};
subjectID = metadata{sessionID, 'subject_id'}{:};
species = 'Mus musculus';
sex = metadata{sessionID, 'sex'}{:};
ageWeeks = metadata{sessionID, 'age'}{:};
ageWeeks = str2double(ageWeeks(1:end-3));
subjectStrain = metadata{sessionID, 'Strain'}{:};

nwb = NwbFile( ...
    'session_description', 'fig_1_pf_kx', ... % optional, but required by inspector
    'general_experiment_description', 'one-photon imaging', ...
    'general_session_id', sessionID, ...
    'identifier', [figName '_' sessionID], ...
    'session_start_time', startTime, ...
    'general_experimenter', 'Vittani, Marta', ... % optional
    'general_institution', 'University of Copenhagen', ... % optional, but preferred by inspector
    'general_keywords', 'neurovascular coupling, optogenetic GPCR, cAMP elevation, blood flow, cortex, mouse, optical imaging.' ...
);

% subject info
ageWeeks = 'P' + string(ageWeeks) + 'W';
subject = types.core.Subject( ...
    'subject_id', subjectID, ...
    'age', char(ageWeeks), ...
    'description', subjectStrain, ... % optional, but preferred by inspector
    'species', species, ... % Subject species 'Mouse' should be in latin binomial form, e.g. 'Mus musculus' and 'Homo sapiens'
    'sex', sex, ...
    'strain', subjectStrain ...
);
nwb.general_subject = subject;

device = types.core.Device( ...
    'description', deviceDescription, ...
    'manufacturer', 'n/a' ...
);
nwb.general_devices.set('Device', device);

optical_channel = types.core.OpticalChannel( ...
    'description', 'grayscale', ...
    'emission_lambda', emissionLambda ...
);
imaging_plane = types.core.ImagingPlane( ...
    'optical_channel', optical_channel, ...
    'description', 'Imaging plane', ...
    'device', types.untyped.SoftLink(device), ...
    'excitation_lambda', excitationLambda, ...
    'imaging_rate', imagingRate, ...
    'indicator', indicator, ...
    'location', location, ...
    'grid_spacing_unit', 'arbitrary unit' ...
);
nwb.general_optophysiology.set('ImagingPlane', imaging_plane);

tifData = zeros(nFrames, width, height, 'uint16');
for j = 1:nFrames
    tifData(j, :, :) = imread(tifFile, j);
end
onePhotonData = types.untyped.DataPipe( ...
    'data', tifData, ...
    'chunkSize', [10, width, height] ...
);
imageSeries = types.core.OnePhotonSeries( ...
    'imaging_plane', types.untyped.SoftLink(imaging_plane), ...
    'starting_time', 0.0, ...
    'starting_time_rate', startingTimeRate, ...
    'description', 'One-photon series', ...
    'data', onePhotonData, ...
    'data_unit', 'arbitrary unit' ...
);
nwb.acquisition.set('OnePhotonSeries', imageSeries);
nwbExport(nwb, nwbFilePath);
end